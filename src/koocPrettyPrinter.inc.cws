/**
 * @file koocPrettyPrinter.inc.cws
 * @brief PrettyPrinter to print the kooc to c
 * @note @ref develop @ref contrib @ref tools
 */

declare function	prettyPrinterToC(file : value = "");
declare function	prettyPrinterToH(file : value = "");
declare function	testType<T>(theNode : node);
declare function	testCType<T>(theNode : node);
declare function	testOType<T>(theNode : node);
declare function	testEType<T>(theNode : node);

#include "prettyPrinter/parse.inc.cws"
#include "prettyPrinter/get.inc.cws"
#include "prettyPrinter/testType.inc.cws"
#include "prettyPrinter/testCType.inc.cws"
#include "prettyPrinter/testEType.inc.cws"
#include "prettyPrinter/testOType.inc.cws"

/**
 * @fn prettyPrinterToC()
 * @brief main function
 * @return code generated from the tree
 */
function	prettyPrinterToC(file : value = "")
{
  return parseBlock(this.block, file);
}

/**
 * @fn prettyPrinterToH()
 * @brief main function
 * @return code generated from the tree
 */
function	prettyPrinterToH(file : value = "")
{
  local		sInfo = "";

  if (existVariable(this.block.prototypes))
    {
      sInfo += "/* prototypes definitions: */\n";
      foreach var in this.block.prototypes
	if (file == "" || file == var.__FILE__)
	  if (!existVariable(var.ctype.infoType["static"]))
	    sInfo += getPrototype(var) + ";\n";
      sInfo += "\n";
    }
  if (existVariable(this.block.variables))
    {
      sInfo += "/* variables declarations: */\n";
      foreach var in this.block.variables
	if (file == "" || file == var.__FILE__)
	  if (!existVariable(var.ctype.infoType["static"]))
	    sInfo += getExternVariable(var) + "\n";
      sInfo += "\n";
    }
  return (sInfo);
}

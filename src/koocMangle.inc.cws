/**
 * @file koocMangle.inc.cws
 * @brief Kooc Mangle file
 * @note @ref develop @ref contrib @ref tools
 * @bug Temp mangling
 */

declare function	mangle(theMod : value);

/**
 * @fn mangle(theMod : value)
 * @brief mangle variable
 * @param theMod variable's name
 */
function	mangle(theMod : value)
{
  local name = "_ZN" + lengthString(theMod) + theMod;
  localref theNode = this.kooc.modules[theMod].block#back;

  if (existVariable(theNode.ctype.infoType["static"]))
    return;

  name += lengthString(theNode.name) + theNode.name;
  name += "E";

  // type
  if (theNode.ctype.type == "__PRIMARY__")
    name += theNode.ctype.identifier.charAt(0);
  else
    name += lengthString(theNode.ctype.identifier)
      + theNode.ctype.identifier;

  // args
  if (existVariable(theNode.list))
    {
      foreach item in theNode.list
	if (item.ctype.type == "__PRIMARY__")
	  name += item.ctype.identifier.charAt(0);
	else
	  name += lengthString(item.ctype.identifier)
	    + item.ctype.identifier;
    }

  insert theNode.oname = theNode.name;
  insert theNode.name = name;

  if (theNode.type == "__VARIABLE__")
    {
      ref this.kooc.modules[theMod].block.variables[theNode.name] =
	this.kooc.modules[theMod].block.variables[theNode.oname];

      removeElement(this.kooc.modules[theMod].block.variables, theNode.oname);
    }
  if (theNode.type == "__PROTOTYPE__")
    {
      ref this.kooc.modules[theMod].block.prototypes[theNode.name] =
	this.kooc.modules[theMod].block.prototypes[theNode.oname];

      removeElement(this.kooc.modules[theMod].block.prototypes, theNode.oname);
    }
}

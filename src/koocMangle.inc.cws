/**
 * @file koocMangle.inc.cws
 * @brief Kooc Mangle file
 * @note @ref develop @ref contrib @ref tools
 * @todo fonction mangle generique (i do it soon !!!)
 * @bug Temp mangling
 */

declare function	koocMangle(theMod : value, theNode : node);
declare function	koocMangleImplementation(theMod : value);
declare function	koocMangleType(theNode : node, name : node);
declare function	koocMangleArgs(theNode : node, name : node);
declare function	koocMangleOn();
declare function	koocMangleOff();
declare function	koocMangleIs();
declare function	koocMangleGet(theType : node);

/**
 * @fn mangle(theMod : value)
 * @brief mangle variable
 * @param theMod variable's name
 */
function	koocMangle(theMod : value, theNode : node)
{
  local		pkgs = "";
  local		name = "_ZN";

  if (existVariable(theNode.ctype.infoType["static"]))
    return;

  cutString(theMod, '.', pkgs);

  foreach pkg in pkgs
    name += lengthString(pkg) + pkg;

  name += lengthString(theNode.name) + theNode.name;
  name += "E";

  koocMangleType(theNode, name);
  koocMangleArgs(theNode, name);

  insert theNode.oname = theNode.name;
  theNode.name = name;
}

function	koocMangleType(theNode : node, name : node)
{
  if (theNode.ctype.type == "__PRIMARY__")
    name += theNode.ctype.identifier.charAt(0);
  else
    name += lengthString(theNode.ctype.identifier)
      + theNode.ctype.identifier;
}

function	koocMangleArgs(theNode : node, name : node)
{
  if (existVariable(theNode.list))
    {
      foreach item in theNode.list
	if (item.ctype.type == "__PRIMARY__")
	  name += item.ctype.identifier.charAt(0);
	else
	  name += lengthString(item.ctype.identifier)
	    + item.ctype.identifier;
    }
}

function	koocMangleOn()
{
  this.kooc.stack["mangle"] = true;
}

function	koocMangleOff()
{
  this.kooc.stack["mangle"] = false;
}

function	koocMangleIs()
{
  return (this.kooc.stack["mangle"]);
}

function	koocMangleInit()
{
  insert this.kooc.mangle;
}

function	koocMangleGet(theType : node)
{
  local		sMangle = "_ZN";

  if (this.kooc.mangle.empty())
    return (theType.name);
  foreach var in this.kooc.mangle
  {
    sMangle += lengthString(var);
    sMangle += var;
  }
  sMangle += lengthString(theType.name);
  sMangle += theType.name;
  sMangle += "E";
  koocMangleType(theType, sMangle);
  koocMangleArgs(theType, sMangle);
  return (sMangle);
}

function	koocMangleGetPath(sName : value)
{
  local		sResult = "";

  if (this.kooc.mangle.empty())
    return (sName);
  foreach var in this.kooc.mangle
  {
    sResult += var;
    sResult += '.';
  }
  sResult += sName;
  return (sResult);
}

function	koocManglePushBlock(sName : value)
{
  local		block;

  if (findString(sName, '.') != -1)
    {
      cutString(sName, '.', block);
      foreach var in block
	pushItem this.kooc.mangle = var;
    }
  else
    pushItem this.kooc.mangle = sName;    
}

function	koocManglePopBlock()
{
  removeVariable(this.kooc.mangle#back);
}

function	koocManglePopAllBlock()
{
  removeAllElements(this.kooc.mangle);
}

/*
** "C normalise"
** Version 2.5
** 
** Authors:
**	Lionel Auroux
** Contributors:
**	Cedric Lemaire
**	David Giron
**	David Amsallem	
**
** Features:
** - Standard C 89 syntax
** - GnuC asm expression
** - GnuC __thread storage class specifier
** - GnuC parameter forward declaration
** - GnuC __extension__ evite les warnings sur l'utilisation d'extention GnuC
** - GnuC subscript
** - GnuC designated initializer
** - GnuC __builtin_offsetof
** - GnuC __builtin_va_list
** - c99 static in direct absolute declarator
** - c99 block as single expression ({ })
** - c99 typeof
** - c99 designation
** - c99 __alignof
** - c99 complex,__real & __imag operator
** - c99 range expression
** - c99 attributes
** - implicit int as return type for function
** - K&R parameter list
**
** This grammar was adapted from the one in section A13 of 
** The C programming language, second edition, 
** by Brian W. Kernighan and Dennis M. Ritchie 
** (Englewood Cliffs, New Jersey: Prentice Hall PTR, 1988; ISBN
** 0-13-110362-8), 
** pages 234 - 238. 
** 
** This file is based on the original document:
** http://www.cs.grinnell.edu/~stone/courses/languages/C-syntax.xhtml
** 
** A lot of change was done after reading:
** - ISO/IEC 9899:TC2
** - ISO/IEC 9899:1999
**
** V2.5 improvements are a totaly normalized AST and
** the corresponding generation templates.
*/

#include "cnormToolkit.inc.cws"
#include "cnormToolType.inc.cws"
#include "cnormToolCtypeNode.inc.cws"
#include "cnormToolDeclarationNode.inc.cws"
#include "cnormCreateCtypeNode.inc.cws"
#include "cnormCreateDeclarationNode.inc.cws"

//----------------------------------------------------------------------------
//                           B E G I N - C - N O R M
//----------------------------------------------------------------------------

#ignore ::= 
[
	['#' ->[['\r']? '\n']]
	| ["//" ->[['\r']? '\n']]
	| ["/*" ->"*/"]
	| ' '
	| '\t'
	| '\n'
	| '\r'
	| '\f' // form feed, sometimes Windows kernel headers have this character.
]+:skip
;

/*
  Racine de la grammaire
*/
translation_unit ::=
#ignore
 => insert this.block;
 => {
   // gestion d'un contexte parent lorsque CNorm est embedded
     insert this.block.pctx;
     // variable globale pour stocker le contexte de l'expression (ecraser a chaque expr)
     if (existVariable(this.gl_pctx))
     {    
       ref this.block.pctx = this.gl_pctx;
     }
     else
     {
       insert this.gl_pctx;
     }
     ref this.gl_pctx = this.block;
   //}
 }
[
 declaration(this.block) 
]*
#continue
#empty
;

// la suite de la grammaire decoupe en 3 fichier pour plus de lisibilite
#include "cnormDeclarations.cwp"
#include "cnormExpressions.cwp"
#include "cnormStatements.cwp"


//----------------------------------------------------------------------------
//                              E N D - C - N O R M
//----------------------------------------------------------------------------

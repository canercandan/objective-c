
   function testOType<T>(theNode : node)
   {
	traceLine("OType non reconnu va falloir le rajouter :) " + T);
   }

  function testOType<"terminal">(theNode : node)
  {
        return theNode.value;
  }

  function testOType<"cast">(theNode : node)
  {
//          return "(" + theNode.left.ctype.identifier + ") " + getLeftNOpe(theNode.right);
          return "(" + getType(theNode.left) + getPointer(theNode.left.ctype)  + ") " + getLeftNOpe(theNode.right);
  }

  function testOType<"typecast">(theNode : node)
  {
//        return "(" + theNode.ctype.identifier + ")";
        return "(" + getType(theNode) + ")";
  }

  function testOType<"priority">(theNode : node)
  {
	return "(" + getLeftNOpe(theNode.expr) + ")";
  }

  function testOType<"compoundstmt">(theNode : node)
  {
	return "(" + getLeftNOpe(theNode.expr) + ")";
  }

  function testOType<"block">(theNode : node)
  {
	return parseBlock(theNode);
  }

  function testOType<"likebinary">(theNode : node)
  {
	return getLeftNOpe(theNode.left) +
	       theNode.operator +
	       getLeftNOpe(theNode.right);
  }

  function testOType<"label">(theNode : node)
  {
	return theNode.label + " " + testType<theNode.type>(theNode) + ":\n" +
	       parseBlock(theNode.block);
  }

  function testOType<"pseudoexpression">(theNode : node)
  {
	return theNode.type + " " + testType<theNode.type>(theNode);
  }

  function testOType<"binary">(theNode : node)
  {
	return getLeftNOpe(theNode.left) + " " +
	       theNode.operator + " " +
	       getLeftNOpe(theNode.right);
  }

  function testOType<"compound">(theNode : node)
  {
	return getLeftNOpe(theNode.left) + " " +
	       theNode.operator + " " +
	       parseBlock(theNode.init);
  }

 function testOType<"index">(theNode : node)
  {
	local sResult = getLeftNOpe(theNode.left) + "[" + parseBlock(theNode.right)  + "]";
	return sResult;
  }

  function testOType<"then">(theNode : node)
  {
	local sResult = "";
	sResult = parseBlock(theNode);
	if (sResult == "")
	   return ";";
	return sResult;
  }

  function testOType<"stmt">(theNode : node)
  {
	return parseBlock(theNode);
  }

 function testOType<"else">(theNode : node)
  {
	return "\nelse\n" + parseBlock(theNode);
  }

 function testOType<"post">(theNode : node)
  {
	return testOType<theNode.left.otype>(theNode.left) + theNode.operator;
  } 

 function testOType<"unary">(theNode : node)
  {
	return theNode.operator + testOType<theNode.left.otype>(theNode.left);
  } 

 function testOType<"while">(theNode : node)
  {
	local sResult = "";
	sResult = "while (" + testOType<theNode.condition.otype>(theNode.condition)  + ")";
	if (existVariable(theNode.stmt))
      	   sResult += testOType<theNode.stmt.otype>(theNode.stmt);
	return sResult;
  }

 function testOType<"do">(theNode : node)
  {
	local sResult = "";
	sResult = "do\n";
	if (existVariable(theNode.stmt))
      	   sResult += testOType<theNode.stmt.otype>(theNode.stmt) + "\n";
	sResult += "while (" + testOType<theNode.condition.otype>(theNode.condition)  + ")";
	return sResult;
  }

 function testOType<"call">(theNode : node)
   {
//	return theNode.left.value + "(" + parseList(theNode.list)  + ")";
	return getLeftNOpe(theNode.left) + "(" + parseList(theNode.list)  + ")";
   }

 function testOType<"switch">(theNode : node)
  {
	local sResult = "switch (";
	if (existVariable(theNode.condition.otype))
	   sResult += testOType<theNode.condition.otype>(theNode.condition);
	sResult += ")" + parseBlock(theNode);
	return sResult;
  }

 function testOType<"for">(theNode : node)
  {
	local sResult = "for (";
	if (existVariable(theNode.init))
	   sResult += parseBlock(theNode.init);
	sResult += ";";
	if (existVariable(theNode.condition))
   	   sResult += testOType<theNode.condition.otype>(theNode.condition);
	sResult += ";";
	if (existVariable(theNode.increment))
	   sResult += testOType<theNode.increment.otype>(theNode.increment);
	sResult += ")";
	if (existVariable(theNode.stmt))
	   sResult += testOType<theNode.stmt.otype>(theNode.stmt);
	return sResult;
  }

 function testOType<"ternary">(theNode : node)
  {
	local sResult = "";
	sResult = testOType<theNode.condition.otype>(theNode.condition)  + " ? ";
	if (existVariable(theNode.then))
	  if (existVariable(theNode.then.otype))
   	   sResult += testOType<theNode.then.otype>(theNode.then);
	if (existVariable(theNode.else))
	   sResult += " : " + testOType<theNode.else.otype>(theNode.else);
	return sResult;
  }

 function testOType<"if">(theNode : node)
  {
	local sResult = "";
	sResult = "if (" + testOType<theNode.condition.otype>(theNode.condition)  + ")\n";
	if (existVariable(theNode.then))
   	   sResult += testOType<theNode.then.otype>(theNode.then);
	if (existVariable(theNode.else))
	   sResult += testOType<theNode.else.otype>(theNode.else);
	return sResult;
  }

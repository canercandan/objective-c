function getArrayInfo(theNode : node)
{
  local sInfo = "";
  foreach info in theNode.ctype.array
  {sInfo += "["+ info  + "]";}
  return sInfo;
}

function getType(theNode : node)
{
  return parseCType(theNode.ctype);
}

function getLeftNOpe(theNode : node)
{
  if (theNode.etype == "init")
    return parseBlock(theNode);
  return testOType<theNode.otype>(theNode);
}

function getPFname(theNode : node)
{
  local sResult = "(";
  foreach var in theNode
  {
    sResult += "*" + var.function.name;
  }
  return sResult + ")";
}

function getPointer(theNode : node)
{
  local sPInfo = "";
  foreach info in theNode.pointer
  {
    if (existVariable(info.level))
      {sPInfo += info.level;}
  }
  return sPInfo;
}

function getSimpleType(theNode : node)
{
  local sInit = "";
  local sPFname = "";
  local sDesignation = "";
  local sList = "";
  local sName = "";
  local sPInfo = "";

  if existVariable(theNode.designation)
		    sDesignation =  "[" + theNode.designation.value + "]";
  if existVariable(theNode.init)
		    sInit += " = " + getLeftNOpe(theNode.init);

  sPFname = getPointer(theNode.ctype);
  if existVariable(theNode.pfname)
		    sPFname += getPFname(theNode.pfname);
  if existVariable(theNode.list)
		    sList += "(" +  parseList(theNode.list) + ")";
  if (!existVariable(theNode.pfname))
    sName = theNode.name;

  return getType(theNode) + " " + sPInfo  + sPFname + " " +
    sDesignation + sName +
    getArrayInfo(theNode) + sList + sInit;
}

function getExpre(theNode : node)
{
  return testType<theNode.otype>(theNode);
}

function getStruct(theNode : node)
{
  local	sValue = "";
  if (existVariable(theNode.ctype.list))
    {
      sValue = "{ ";
      foreach var in theNode.ctype.list
      {
	if (existVariable(var.ctype))
	  sValue += testCType<var.ctype.type>(var);
	sValue += "; ";
      }
      sValue += "}";
    }
  return getType(theNode) + " " +
    sValue + " " +
    theNode.name;
}

function getFunc(theNode : node)
{
  local sValue = "";
  local sInner = "";
  local sName = "";
  sValue += parseList(theNode.list);
  if (theNode.type == "__FUNCTION__")
    {
      sInner = parseBlock(theNode);
    }
  return getType(theNode) + " " +
    theNode.name +
    "(" + sValue + ")" +
    sInner;
}

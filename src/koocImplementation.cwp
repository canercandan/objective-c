/**
 * @file koocImplementation.cwp
 * @brief \@implementation grammar file
 * @note @ref develop @ref contrib @ref tools
 *
 * @par ExplicitCopy
 *
 * @par #koocImplementation
 * rule @implementation
 *
 * @par #addImplementation
 * add an implementation if a module whit the same name exist
 *
 * @todo @member { functions }
 * @bug generateString what the fuck Cedric!!! fixed by the
 * function prettyPrintExistFile 42
 */

/**
 * @cond
 */
koocImplementation ::=
#explicitCopy
  "@implementation" #continue #readIdentifier:sName
=> local type = "";
=> local filenameC = "";
=> koocManglePushBlock(sName);
=> sName = koocMangleSpacer('.');
=> koocImplementationInit(sName, type, filenameC);
'{'
[
 [ "@member" | [ "@virtual" [ "@member" ]? ] ]
 [ declaration(this.block)
   => treeAddSelf(sName, this.block#back);
   => koocImplementationContent(sName, type);
   => treeAddSelf(sName, this.block#back);
   | '{' [ [ "@virtual" ]? declaration(this.block)
	   => koocImplementationContent(sName, type);
	   => treeAddSelf(sName, this.block#back);
	   ]* '}'
   ]
 | declaration(this.block)
 => koocImplementationContent(sName, type);
 ]*
=> localref theImplementation = this.kooc.implementations[sName];
=> koocImplementationDependency(sName, theImplementation);
#generatedFile(getEnv("path_import") + filenameC)
=> koocImplementationPrint(sName, type);
'}'
=> koocManglePopBlock();
;

/**
 * @endcond
 */

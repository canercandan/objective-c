/**
 * @file koocImplementation.cwp
 * @brief \@implementation grammar file
 * @note @ref develop @ref contrib @ref tools
 *
 * @par ExplicitCopy
 *
 * @par #koocImplementation
 * rule @implementation
 *
 * @par #addImplementation
 * add an implementation if a module whit the same name exist
 *
 * @bug generateString what the fuck Cedric!!! fixed by the
 * function prettyPrintExistFile
 */

/**
 * @cond
 */
koocImplementation
	::= #explicitCopy [ addImplementation ]
;

addImplementation ::= "@implementation"
#continue #readIdentifier:sName
  => if (!existModule(sName) && !existClass(sName))
    { traceLine("Module or Class [" + sName + "] doesn't exist"); exit(-1); }
  '{'
  => if (this.kooc.stack["package"] != "")
      { sName = this.kooc.stack["package"] + '.' + sName; }
  [
    declaration(this.block)
    => pushItem this.kooc.implementations[sName];
    => ref this.kooc.implementations[sName]#back = this.block#back;
    => localref theNode = this.kooc.implementations[sName]#back;
    => treeInsertFileOut(this.kooc.stack["path_import"] + this.kooc.modules[sName].nameC);
    => koocMangle(sName, theNode);
  ]*

  #generatedFile(this.kooc.stack["path_import"] + this.kooc.modules[sName].nameC)
  => if (existModule(sName) == 1)
     {
	check_implementation(sName, this.kooc.modules);
	@@prettyPrinterToC(this.kooc.stack["path_import"]
		       + this.kooc.modules[sName].nameH + "_variable")@@
	@@prettyPrinterToC(this.kooc.stack["path_import"]
			   + this.kooc.modules[sName].nameC)@@
     }
/*
  => if (existClass(sName) == 1)
     {
	check_implementation(sName, this.kooc.classes);
	@@prettyPrinterToC(this.kooc.stack["path_import"]
			   + this.kooc.classes[sName].nameC)@@			this.kooc.implementations[sName]);
     }
*/
//  #generatedFile(this.kooc.stack["pathC"])
   '}'
;
/**
 * @endcond
 */

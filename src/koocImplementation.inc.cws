/**
 * @file koocImplementation
 * @brief koocImplementation functions
 * @note soon
 * @todo signaler error lorsqu'une fonction definis dans @imnplementation
 * n'est pas defini dans @module
 * @todo mangling des definitions de fonctions.
 */

declare function	check_implementation(name : value);
declare function	check_prototypes(var1 : node, var2 : node, name : value);
declare function	check_arguments(fun1 : node, fun2 : node);

// Fonctions non finis: normal que vous comprenez pas tout...
// Implementation de base marche mais je fixe qlq trucs.

/**
 * @fn check_implementation(name : value)
 * @brief check si les fonctions implementater ont bien ete defini 
 * dans le module concerne
 * @param name (value): nom de l'implementation
 * @return soon
 */
function	check_implementation(name : value)
{
  local		prototype;
  local		find;

  foreach itemMod in this.kooc.modules[name].block
  {
    if (itemMod.type = "__PROTOTYPE__")
      {
	find = false;
	foreach itemImp in this.kooc.implementations[name].block
	{
	  if (itemMod.oname == itemImp.name)
	    {
	      prototype = check_prototypes(itemMod, itemImp, itemMod.oname);
	      find = (prototype == "" ? false : true);
	      if (find == true)
		break;
	    }
	}
	if (find == false)
	  {
	    traceLine("error: [" + itemMod.oname + "]'s declaration is missing");
	    exit(-1);
	  }
      }
  }
  return (prototype);
}

/**
 * @fn check_prototypes(var1 : node, var2 : node, name : value)
 * @brief verifie si 2 prototypes de fonctions sont egals
 * @param var1 (node): noeud du 1er prototype
 * @param var2 (node): noeud du 2nd prototype
 * @param name (value): nom manglee de la fonction
 * @return soon
 */
function	check_prototypes(var1 : node, var2 : node, name : value)
{
  local		prototype = "";
  local		args = "";

  if (var2.ctype.identifier == var1.ctype.identifier)
    prototype += var1.ctype.identifier;

  if ((prototype != "") && (var2.ctype.sign == var1.ctype.sign))
    prototype += " " + var1.ctype.sign;
  else
    prototype = "";

  if (prototype != "")
    prototype += " " + name;

  args = check_arguments(var1.list, var2.list);
  if ((prototype != "" ) && (args != ""))
    prototype += "( " + args + " )\n";
  else
    prototype = "";

  return (prototype);
}

/**
 * @fn check_arguments(fun1 : node, fun2 : node)
 * @brief verifie si les arguments de 2 prototypes de fonctions sont egals
 * @param fun1 (node): noeud du 1er prototype
 * @param fun2 (node): noeud du 2nd prototype
 * @return soon
 */
function	check_arguments(fun1 : node, fun2 : node)
{
  local		argsFun1 = "";
  local		argsFun2 = "";

  if (countNbArgInFunc(fun1) != countNbArgInFunc(fun2))
    return ("");
  foreach info in fun1
    argsFun1 += "[" + info.ctype.identifier + info.ctype.sign + "]";

  foreach info in fun2
    argsFun2 += "[" + info.ctype.identifier + info.ctype.sign + "]";

  if (argsFun1 == argsFun2)
    return ("42");
  else
    return ("");
}

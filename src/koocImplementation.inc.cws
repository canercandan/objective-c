/**
 * @file koocImplementation.inc.cws
 * @brief koocImplementation functions
 * @note @ref develop @ref contrib @ref tools
 * @todo signaler error lorsqu'une fonction
 * definis dans \@imnplementation
 * n'est pas defini dans \@module
 * @todo mangling des definitions de fonctions.
 */

declare function	check_implementation(name : value);
declare function	check_prototypes(var1 : node, var2 : node);
declare function	check_arguments(fun1 : node, fun2 : node);

// Fonctions non finis: normal que vous comprenez pas tout...
// Implementation de base marche mais je fixe qlq trucs.

/**
 * @fn check_implementation(name : value)
 * @brief check si les fonctions implementater ont bien ete defini
 * dans le module concerne
 * @param name (value): nom de l'implementation
 */
function	check_implementation(name : value)
{
  local		prototype;
  local		find;

  if (!existVariable(this.kooc.modules[name].block))
    exit(-1);

  if (!existVariable(this.kooc.implementations[name].block))
    exit(-1);

  foreach itemMod in this.kooc.modules[name].block
  {
    if (itemMod.type = "__PROTOTYPE__")
      {
	find = false;
	foreach itemImp in this.kooc.implementations[name].block
	{
	  if ((itemMod.name == itemImp.name) &&
	      (check_prototypes(itemMod, itemImp) == true))
	    {
	      find = true;
	      break;
	    }
	}
	if (find == false)
	  {
	    prototype = itemMod.sign + " " + itemMod.identifier;
	    prototype += " " + itemMod.name + "(...)";
	    traceLine("error: [ " + prototype + " ]'s declaration is missing");
	    exit(-1);
	  }
      }
  }
}

/**
 * @fn check_prototypes(var1 : node, var2 : node, name : value)
 * @brief verifie si 2 prototypes de fonctions sont egals
 * @param var1 (node): noeud du 1er prototype
 * @param var2 (node): noeud du 2nd prototype
 * @param name (value): nom manglee de la fonction
 * @return true si ok, false sinon :p
 */
function	check_prototypes(var1 : node, var2 : node)
{
  local		args = "";

  if ((var2.ctype.identifier == var1.ctype.identifier)
      && (var2.ctype.sign == var1.ctype.sign)
      && (check_arguments(var1.list, var2.list) == true))
    return (true);
  else
    return (false);
}

/**
 * @fn check_arguments(fun1 : node, fun2 : node)
 * @brief verifie si les arguments de 2 prototypes de fonctions sont egals
 * @param fun1 (node): noeud du 1er prototype
 * @param fun2 (node): noeud du 2nd prototype
 * @return true si ok, false sinon :p
 */
function	check_arguments(fun1 : node, fun2 : node)
{
  local		argsFun1 = "";
  local		argsFun2 = "";

  if (countNbArgInFunc(fun1) != countNbArgInFunc(fun2))
    return (false);
  foreach info in fun1
    argsFun1 += "[" + info.ctype.identifier + info.ctype.sign + "]";
  foreach info in fun2
    argsFun2 += "[" + info.ctype.identifier + info.ctype.sign + "]";
  if (argsFun1 == argsFun2)
    return (true);
  else
    return (false);
}

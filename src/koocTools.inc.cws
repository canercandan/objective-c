/**
 * @file koocTools.inc.cws
 * @brief koocTools functions
 * @note @ref develop @ref contrib @ref tools
 */

declare function	koocToolsAddRef(theNode : node);

function	koocToolsAddRef(theNode : node)
{
  if (theNode.type == "__VARIABLE__")
    ref this.block.variables[theNode.name] = theNode;
  else if (theNode.type == "__TYPE__")
    ref this.block.types[theNode.name] = theNode;
  else if (theNode.type != "__PROTOTYPE__" &&
	   theNode.ctype.type == "__COMPOSED__")
    {
      if (theNode.ctype.specifier == "enum")
	ref this.block.enums[theNode.name] = theNode;
      else if (theNode.ctype.specifier == "struct")
	ref this.block.structs[theNode.name] = theNode;
      if (theNode.ctype.specifier == "union")
	ref this.block.unions[theNode.name] = theNode;
    }
  else if (theNode.type == "__PFUNCTION__")
    ref this.block.pfunctions[theNode.name] = theNode;
  else if (theNode.type == "__FUNCTION__")
    ref this.block.functions[theNode.name] = theNode;
  else if (theNode.type == "__PROTOTYPE__")
    ref this.block.prototypes[theNode.name] = theNode;
}

function	koocToolsEqualFuncs(f1 : node, f2 : node)
{
  local		i;
  local		av1;
  local		av2;

  av1 = f1.list.getArraySize();
  av2 = f2.list.getArraySize();

  if (av1 != av2)
    return (false);

  if (equalTrees(f1.ctype, f2.ctype) == false)
    return (false);

  traceLine("CTYPE EQUALS");
  i = 0;

  while (i < av1)
    {
      if (equalTrees(f1.list[i].ctype, f2.list[i].ctype) == false)
	{
	  traceObject(f1.list[i].ctype);
	  traceObject(f2.list[i].ctype);
	  return (false);
	}
      i = $i + 1$;
    }

  traceLine("ALL EQUALS");
  return (true);
}

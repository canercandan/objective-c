/**
 * @file koocClass.cwp
 * @brief rule \@class
 * @note @ref develop @ref contrib @ref tools
 *
 * @par koocClass
 * rule \@class
 */

koocClass ::=
#explicitCopy
"@class"
#continue #readIdentifier:sClass
[
 ':'
 [#readIdentifier:sExtend => koocClassExtendErr(sExtend);
  ]
 ]?
  '{'
  => koocManglePushBlock(sClass);
=> sClass = koocMangleSpacer('.');
=> koocClassInit(sClass);
=> koocClassFill(sClass, sExtend);
=> localref theNode = this.block#back;
[koocMember(theNode)
 |
 declaration(this.block)
 => koocClassErr(this.block#back);
 =>
 {
   localref theBlock = this.block#back;

   local isSelf = (
     theBlock.ctype.list#front.identifier == sClass &&
     existVariable(theBlock.ctype.list#front.pointer) &&
     theBlock.ctype.list#front.pointer.getArraySize() == 1
   );

   if (!isSelf)
   {
     insert this.block#back.ctype.infoType;
     insert this.block#back.ctype.infoType["static"] = "storageClassSpecifier";
   }

  if (this.block#back.type == "__VARIABLE__")
    treeInsertFileOut(this.kooc.stack["path_import"]
		      + this.kooc.classes[sClass].nameH + "_variable");
  else
    treeInsertFileOut(this.kooc.stack["path_import"]
		      + this.kooc.classes[sClass].nameH);
 }
 ]*
#generatedFile(this.kooc.stack["path_import"] + this.kooc.classes[sClass].nameH)
=> koocClassPrint(sClass);
['}' => this.kooc.stack["class"] = "";]
=> koocManglePopBlock();
;

/**
 * @file koocImport.inc.cws
 * @brief koocImport'functions
 * @note @ref develop @ref contrib @ref tools
 */

declare function	koocImportPathKh(file : value);
declare function	koocImportPathH(file : value);
declare function	koocImportNameH(file : value);
declare function	koocImportIfndef(file : value);
declare function	koocImportIfndef(file : value);
declare function	koocImportEndif(file : value);
declare function	koocImportInclude(file : value);

/**
 * @fn koocImportPathKh(file : value)
 * @brief get path file .kh
 * @param file filename
 * @return path file .kh
 */
function	koocImportPathKh(file : value)
{
  return (this.kooc.stack["path_import"] + file);
}

/**
 * @fn koocImportPathH(file : value)
 * @brief get path file .h
 * @param file filename
 * @return path file .h
 */
function	koocImportPathH(file : value)
{
  return (replaceString(".kh", ".h", koocImportPathKh(file)));
}

/**
 * @fn koocImportNameH(file : value)
 * @brief get name file .h to print the header protection
 * @param file filename
 * @return name file .h
 */
function	koocImportNameH(file : value)
{
  return (replaceString('.', '_',
			replaceString('/', '_',
				      toUpperString(file))));
}

/**
 * @fn koocImportIfndef(file : value)
 * @brief print ifndef to the header'file
 * @param file filename
 */
function	koocImportIfndef(file : value)
{
  local		pathH = koocImportPathH(file);
  local		nameH = koocImportNameH(file);

  {%>#ifndef __@nameH@__@"\n"@# define __@nameH@__@"\n\n"@<%}
/*   insert this.kooc.headers[pathH]; */
/*   insert this.kooc.headers[pathH].block; */
}

/**
 * @fn koocImportEndif(file : value)
 * @brief print endif to the header'file
 * @param file filename
 */
function	koocImportEndif(file : value)
{
  {%>#endif /* !__@koocImportNameH(file)@__ */@"\n"@<%}
}

/**
 * @fn koocImportInclude(file : value)
 * @brief print include to the header'file
 * @param file filename
 */
function	koocImportInclude(file : value)
{
  local		pathH = replaceString(".kh", ".h", file);

  {%>#include "@pathH@"@"\n\n"@<%}
}

/**
 * @file koocTree.inc.cws
 * @brief koocTree functions
 * @note @ref develop @ref contrib @ref tools
 */

declare function	treeInit();
declare function	treeKooc();
declare function	treeCopyInfos(block : node);
declare function	treeCopyInfosInArray(dst : node, src : node);
declare function	treeInsertFileOut(file : value, theNode : node);

/**
 * @fn treeInit(block : node)
 * @brief init tree
 * @param block tree's block
 */
function	treeInit()
{
  insert this.block.pctx;
  if (existVariable(this.gl_pctx))
    ref this.block.pctx = this.gl_pctx;
  else
    insert this.gl_pctx;
  ref this.gl_pctx = this.block;
}

/**
 * @fn treeKooc()
 * @brief init tree kooc
 */
function	treeKooc()
{
  insert this.kooc;
  insert this.kooc.modules;
  insert this.kooc.classes;
}

/**
 * @fn treeCopyInfos(block : node)
 * @brief copy typedef, struct, enum, function [, ...]* in Cnorm
 * @param block tree's block
 */
function	treeCopyInfos(block : node)
{
  treeCopyInfosInArray(this.block.structs, block.structs);
  treeCopyInfosInArray(this.block.enums, block.enums);
  treeCopyInfosInArray(this.block.unions, block.unions);
  treeCopyInfosInArray(this.block.types, block.types);
  treeCopyInfosInArray(this.block.variables, block.variables);
  treeCopyInfosInArray(this.block.functions, block.functions);
}

/**
 * @fn treeCopyInfosInArray(dst : node, src : node)
 * @brief copy infos form source to destination
 * @param dst destination tree's block
 * @param src source tree's block
 */
function	treeCopyInfosInArray(dst : node, src : node)
{
  if (!existVariable(dst))
    insert dst;
  foreach var in src
    ref dst[key(var)] = var;
}

function	treeInsertFileOut(file : value, theNode : node)
{
  insert theNode.__FILE__ = file;
}

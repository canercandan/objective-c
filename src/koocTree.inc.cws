/**
 * @file koocTree.inc.cws
 * @brief koocTree functions
 * @note @ref develop @ref contrib @ref tools
 */

declare function	treeInit();
declare function	treeKooc();
declare function	treeCopyInfos(block : node);
declare function	treeCopyInfosInArray(dst : node, src : node);
declare function	treeInsertFileOut(file : value, theNode : node);

/**
 * @fn treeInit(block : node)
 * @brief init tree
 * @param block tree's block
 */
function	treeInit()
{
  insert this.block.pctx;
  if (existVariable(this.gl_pctx))
    ref this.block.pctx = this.gl_pctx;
  else
    insert this.gl_pctx;
  ref this.gl_pctx = this.block;
}

/**
 * @fn treeKooc()
 * @brief init tree kooc
 */
function	treeKooc()
{
  insert this.kooc;
  insert this.kooc.modules;
  insert this.kooc.classes;
}

function	treeInsertFileOut(file : value, theNode : node)
{
  insert theNode.__FILE__ = file;
}

function	treeSeekForFunctionOrPrototype(theNode : node,
					       sName : value)
{
  foreach var in theNode
    if (var.oname == "init" &&
	(var.type == "__FUNCTION__" ||
	 var.type == "__PROTOTYPE__"))
      return (true);
  return (false);
}

function	treeCreateFunctionEmpty(sName : node, refPath : node,
					sType : value)
{
  local		ctype;

  pushItem this.block;
  localref theDecl = this.block#back;
  ref ctype.pctx = this.gl_pctx;
  cnormCreateCtypeNode(ctype);
  cnormCreateDeclarationNode(theDecl, sType);
  cnormFillCtypeNode(ctype, "__TYPEID__", "void");
  cnormFillDeclarationNode(theDecl, "__NAME__", sName);
  cnormFillDeclarationNode(theDecl, "__CTYPE__", ctype);
  insert theDecl.etype = "declaration";
  insert theDecl.list;
  insert theDecl.oname = theDecl.name;
  theDecl.name = koocMangle(theDecl);
  pushItem refPath;
  ref refPath#back = theDecl;
}

function	treeCreateLink(theNode : node,
			       theLink : node)
{
  ref theNode.link = theLink;
}

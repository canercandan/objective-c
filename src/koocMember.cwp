/**
 * @file koocMember.cwp
 * @brief \@member grammar
 * @note @ref develop @ref contrib @ref tools
 *
 * @par koocMember
 * rule \@member
 */

/**
 * @cond
 */

koocMember(theClass : node) ::=
#explicitCopy
"@member"
#continue
[
  [ '{' [ koocMemberDeclaration(theClass) ]* '}']
  |  koocMemberDeclaration(theClass)
]
;

koocMemberDeclaration(theClass : node) ::=
#explicitCopy
declaration(this.block)
=>
{
  local sClass = this.kooc.stack["class"];
  localref theDecl = this.block#back;

  pushItem this.kooc.classes[sClass];

  if (theDecl.type == "__VARIABLE__")
    {
      theDecl.name = theDecl.oname;
      pushItem theClass.ctype.list;
      setall theClass.ctype.list#back = theDecl;
      removeVariable(theDecl);
      ref this.kooc.classes[sClass]#back
	= theClass.ctype.list#back;
      treeInsertFileOut(this.kooc.stack["path_import"]
			+ this.kooc.classes[sClass].nameH + "_variable");
    }
  else
    {
      koocMemberAddSelf(sClass, theDecl);
      //koocClassAdd(sClass);
      ref this.kooc.classes[sClass]#back = theDecl;
      treeInsertFileOut(this.kooc.stack["path_import"]
		      + this.kooc.classes[sClass].nameH);
    }
}
;

/**
 * @endcond
 */

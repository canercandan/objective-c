/**
 * @file koocMember.inc.cws
 * @brief koocMember functions
 * @note @ref develop @ref contrib @ref tools
 */

declare function	koocMemberDeclaration(theClass : node);
declare function	koocMemberDeclarationVariableFunction(theClass : node, sClass : value, theDecl : node);
declare function	koocMemberInsertReference(theClass : node, sClass : value, theDecl : node);
declare function	koocMemberCreateOneNew(sClass : value, theDecl : node);
declare function	koocMemberCreateNew(sClass : value);
declare function	koocMemberCreateDelete(sClass : value);
declare function	koocMemberAddSelf(sClass : value, theNode : node);

function	koocMemberDeclaration(theClass : node)
{
  local		sClass = koocMangleSpacer('.');
  localref	theDecl = this.block#back;

  koocMemberCreateOneNew(sClass, theDecl);
  koocMemberDeclarationVariableFunction(theClass, sClass, theDecl);
  koocMemberInsertReference(theClass, sClass, theDecl);
}

function	koocMemberDeclarationVariableFunction(theClass : node, sClass : value, theDecl : node)
{
  if (theDecl.type == "__VARIABLE__")
    {
      pushItem theClass.ctype.list;
      setall theClass.ctype.list#back = theDecl;
      removeElement(this.block.variables, theDecl.name);
    }
  else
    {
      koocMemberAddSelf(sClass, theDecl);
      treeInsertFileOut(getEnv("path_import")
			+ this.kooc.classes[sClass].nameH,
			theDecl);
    }
}

function	koocMemberInsertReference(theClass : node, sClass : value, theDecl : node)
{
  pushItem this.kooc.classes[sClass];
  if (theDecl.type == "__VARIABLE__")
    ref this.kooc.classes[sClass]#back = theClass.ctype.list#back;
  else
    ref this.kooc.classes[sClass]#back = theDecl;
}

function	koocMemberCreateNew(sClass : value)
{
  local		fnd = false;
  local		sName;
  localref	theClass = this.kooc.classes[sClass];
  localref	theImplementation = this.kooc.implementations[sClass];

  if (!treeSeekForFunctionOrPrototype(theClass, "init"))
    {
      sName = "init";
      treeCreateFunctionEmpty(sName, theClass, "__PROTOTYPE__");
      localref theInit = this.block#back;
      treeCreateFunctionEmpty(sName, theImplementation, "__PROTOTYPE__");
      localref theInitFunc = this.block#back;
      sName = "new";
      treeCreateFunctionEmpty(sName, theClass, "__PROTOTYPE__");
      localref theNew = this.block#back;
      treeCreateFunctionEmpty(sName, theImplementation, "__FUNCTION__");
      localref theNewFunc = this.block#back;
      treeCreateLink(theInit, theNew);
      treeCreateLink(theInitFunc, theNewFunc);
      treeCreateLink(theNew, theInit);
      treeCreateLink(theNewFunc, theInitFunc);
    }
}

function	koocMemberCreateDelete(sClass)
{
  local		fnd = false;
  local		sName;
  localref	theClass = this.kooc.classes[sClass];
  localref	theImplementation = this.kooc.implementations[sClass];

  if (!treeSeekForFunctionOrPrototype(theClass, "clean"))
    {
      sName = "clean";
      treeCreateFunctionEmpty(sName, theClass, "__PROTOTYPE__");
    }
  sName = "delete";
  treeCreateFunctionEmpty(sName, theClass, "__PROTOTYPE__");
  localref theDelete = this.block#back;
  koocMemberAddSelf(sClass, theDelete);
  treeCreateFunctionEmpty(sName, theImplementation, "__PROTOTYPE__");
  localref theDeleteFunc = this.block#back;
  koocMemberAddSelf(sClass, theDeleteFunc);
}

function	koocMemberCreateOneNew(sClass : value, theDecl : node)
{
  local		sName = "new";

  if (theDecl.oname == "init")
    {
      treeCreateFunctionEmpty(sName, this.kooc.classes[sClass], "__PROTOTYPE__");
      localref theSrc = this.block#back;
      setall theSrc.list = theDecl.list;
      treeCreateLink(theSrc, theDecl);
      treeCreateLink(theDecl, theSrc);
      traceObject(theSrc);
      traceObject(theDecl);
    }
}

function	koocMemberAddSelf(sClass : value, theNode : node)
{
  local		name;
  local		self;
  local		ctype;

  insert ctype.pctx;
  ref ctype.pctx = this.gl_pctx;

  // Create du ctype
  cnormCreateCtypeNode(ctype);

  // Self is a pointer
  cnormFillCtypeNode(ctype, "__POINTER__", "*");

  insert ctype.type = "__COMPOSED__";
  insert ctype.identifier = sClass;

  // Create declaration
  cnormCreateDeclarationNode(self, "__VARIABLE__");

  name = "self";
  cnormFillDeclarationNode(self, "__NAME__", name);
  cnormFillDeclarationNode(self, "__CTYPE__", ctype);

  invertArray(theNode.list);

  pushItem theNode.list;
  setall theNode.list#back = self;

  invertArray(theNode.list);
}

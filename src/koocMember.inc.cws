/**
 * @file koocMember.inc.cws
 * @brief koocMember functions
 * @note @ref develop @ref contrib @ref tools
 */

declare function	koocMemberDeclaration(theClass : node);
declare function	koocMemberDeclarationVariableFunction(theClass : node, sClass : value, theDecl : node);
declare function	koocMemberInsertReference(theClass : node, sClass : value, theDecl : node);

/**
 * @fn koocMemberDeclaration(theClass : node)
 * @brief undef
 * @param theClass node
 */
function	koocMemberDeclaration(theClass : node)
{
  local		sClass = koocMangleSpacer('.');
  localref	theDecl = this.block#back;

  treeCreateOneNew(theDecl, "__PROTOTYPE__", this.kooc.classes[sClass]);
  koocMemberDeclarationVariableFunction(theClass, sClass, theDecl);
  koocMemberInsertReference(theClass, sClass, theDecl);
}

/**
 * @fn koocMemberDeclarationVariableFunction(theClass : node, sClass : value, theDecl : node)
 * @brief undef
 * @param theClass node
 * @param sClass value
 * @param theDecl node
 */
function	koocMemberDeclarationVariableFunction(theClass : node, sClass : value,
						      theDecl : node)
{
  if (theDecl.type == "__VARIABLE__")
    {
      pushItem theClass.ctype.list;
      setall theClass.ctype.list#back = theDecl;
      removeElement(this.block.variables, theDecl.name);
    }
  else
    {
      treeAddSelf(sClass, theDecl);
      treeInsertFileOut(getEnv("path_import")
			+ this.kooc.classes[sClass].nameH,
			theDecl);
    }
}

/**
 * @fn koocMemberInsertReference(theClass : node, sClass : value, theDecl : node)
 * @brief undef
 * @param theClass node
 * @param sClass value
 * @param theDecl node
 */
function	koocMemberInsertReference(theClass : node, sClass : value, theDecl : node)
{
  pushItem this.kooc.classes[sClass];
  if (theDecl.type == "__VARIABLE__")
    ref this.kooc.classes[sClass]#back = theClass.ctype.list#back;
  else
    ref this.kooc.classes[sClass]#back = theDecl;
}

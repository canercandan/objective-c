/**
 * @file koocCall.cwp
 * @brief [ ... ] Kooc Expression file
 * @note @ref develop @ref contrib @ref tools
 *
 * @par primary_expression(expr : node)
 * rule (overload of Cnorm)
 *
 * @par koocCall(expr : node)
 * nothing
 *
 * @par koocCallCast : value
 * nothing
 *
 * @par koocCallIdentifiantModule(callTree : node)
 * nothing
 *
 * @par koocCallIdentifiantVariable(expr : node, callTree : node)
 * nothing
 *
 * @par koocCallIdentifiantFunction(expr : node, callTree : node)
 * nothing
 *
 * @par koocCallListParameter(expr : node, callTree : node)
 * nothing
 *
 * @par koocCallIdentifier
 * nothing
 * 
 * @par koocCallParam(expr : node)
 * nothing
 *
 */

/**
 * @cond
 */
#overload primary_expression(expr : node) ::=
#super::primary_expression(expr)
| koocCall(expr)
;

koocCall(expr : node) ::=
  => local callTree;
  => koocCallInit(callTree);
#explicitCopy [koocCallCast(expr):callTree.sType]?
'['
koocCallIdentifiantModule(callTree)
[
 koocCallIdentifiantVariable(expr, callTree)
 |
 [
  koocCallIdentifiantFunction(expr, callTree)
  koocCallListParameter(expr, callTree)
  ]
 ]
']'
;

koocCallCast(expr : node) : value ::=
  "@!("->(:koocCallCast)')'
;

koocCallIdentifiantModule(callTree : node) ::=
  ['&']*:callTree.ptr [koocCallIdentifier ['.' koocCallIdentifier]*]:callTree.sModule
;

koocCallIdentifiantVariable(expr : node, callTree : node) ::=
  [ !!']'
    => koocCallIdentifantVariable(expr, callTree);
    ]
;

koocCallIdentifiantFunction(expr : node, callTree : node) ::=
=> koocCallIdentifiantFunctionInit(callTree);
koocCallIdentifier:func
=> koocCallIdentifiantFunctionRun(expr, callTree, func);
;

koocCallListParameter(expr : node, callTree : node) ::=
  => koocCallListParameter(expr, callTree);
[
 ':' koocCallParam(expr):val
 => callTree.cnt = $callTree.cnt + 1$;
 ]*
=> koocCallListParameterCheck(callTree);
;

koocCallIdentifier ::= #readIdentifier
;

koocCallParam(expr : node) ::=
  => pushItem expr.list;
  => insert expr.list#back.type = "primary_expression";
  ['&']*:ptr
   [
   [#readIdentifier:val | #readNumeric:val]
   => insert expr.list#back.value = ptr + val;
   => insert expr.list#back.operator = "id";
   => insert expr.list#back.otype = "terminal";
   ]
  | [
      [
      #readCString:val
      => insert expr.list#back.value = '"' + val + '"';
      => insert expr.list#back.ctype;
      => insert expr.list#back.ctype.identifier = "char";
      => insert expr.list#back.infotype;
      => insert expr.list#back.infotype["const"] = "typeQualifier";
      => insert expr.list#back.pointer;
      => insert expr.list#back.pointer["0"];
      => insert expr.list#back.pointer["0"].level = "*";
      ]
    | [
      #readCChar:val
      => insert expr.list#back.value = "'" + val + "'";
      => insert expr.list#back.ctype;
      => insert expr.list#back.ctype.identifier = "char";
      ]
    => insert expr.list#back.otype = "terminal";
    => insert expr.list#back.operator = "literal";
    ]
;

/**
 * @endcond
 */

/**
 * @file koocModule.cwp
 * @brief \@module grammar
 * @note @ref develop @ref contrib @ref tools
 *
 * @par koocModule(sModule : node)
 * rule \@module
 */

/**
 * @cond
 */
koocModule(sModule : node) ::=
#explicitCopy
"@module"
#continue
[
//#try
#readIdentifier:sModule
'{'
  => { if (this.kooc.stack["package"] != "")
      sModule = this.kooc.stack["package"] + "." +  sModule;
  }
  => koocModuleInit(sModule);
  [declaration(this.block)
   => pushItem this.kooc.modules[sModule];
   => ref this.kooc.modules[sModule]#back = this.block#back;
   => {
   if (this.block#back.type == "__VARIABLE__")
   treeInsertFileOut(this.kooc.stack["path_import"]
			+ this.kooc.modules[sModule].nameH + "_variable");
   else
   treeInsertFileOut(this.kooc.stack["path_import"]
			+ this.kooc.modules[sModule].nameH);
}
  => koocModuleCheck(sModule);
  => koocModuleMangle(sModule);
  ]*
=> koocModuleContent(sModule);
#generatedFile(this.kooc.stack["path_import"] + this.kooc.modules[sModule].nameH)
=> {@@prettyPrinterToH(this.kooc.stack["path_import"]
		       + this.kooc.modules[sModule].nameH + "_variable")@@}
=> {@@prettyPrinterToC(this.kooc.stack["path_import"]
		       + this.kooc.modules[sModule].nameH)@@}
#generatedFile(this.kooc.stack["pathH"])
'}'
/*#catch (sError)
|
=> errorModule();
*/]
;
/**
 * @endcond
 */

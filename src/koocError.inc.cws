declare function	errorIncludeFile(path : value);
declare function	errorImport();
declare function	existModule(name : value);
declare function	existVar(module : value, name : value);
declare function	existFunc(module : value, name : value);
declare function	existVarInFunc(module : value, name_func : value, name_param : value, place : value);

function	errorIncludeFile(path : value)
{
  if (!path.existFile())
    {
      traceLine("#include \"" + path + "\" wasn't found");
      exit(-1);
    }
}

function	errorImport()
{
  traceLine("syntax error in @import");
  exit(-1);
}

function	existModule(name : value)
{
  local		modules;

  modules = this.kooc.modules;
  foreach info in modules
  {
    if (key(info) == name)
      return (1);
  }
  traceLine("error - module " + name + "doesn't exist.");
  exit(-1);
}

function	existVar(module : value, name : value)
{
  local		modules;

  modules = this.kooc.modules;
  foreach info in modules
  {
    if (key(info) == module)
      {
	foreach val in info
	{
		if (key(val) == name)
		   return (1);
	}
      }
  }
  traceLine("error - variable " + name + "doesn't exist in " + module + " module.");
  exit(-1);
}

function	existFunc(module : value, name : value)
{
  local		modules;

  modules = this.kooc.modules;
  foreach info in modules
  {
    if (key(info) == module)
      {
	foreach val in info
	{
		if (key(val) == name)
		   return (1);
	}
      }
  }
  traceLine("error - function " + name + "doesn't exist in " + module + " module.");
  exit(-1);
}

function	existVarInFunc(module : value, name_func : value, name_param : value, place : value)
{
  local		modules;
  local		i = 0;

  modules = this.kooc.modules;
  foreach info in modules
  {
    if (key(info) == module)
      {
	foreach val in info
	{
		if (key(val) == name_func)
		   {
			foreach param in val
			{
				if (key(param) == name_param && i == place)
				{
					return (1);
				}
				i = i + 1;
			}
		   }
	}
      }
  }
  traceLine("error - param " + name_param + "doesn't exist in " + module + " module.");
  exit(-1);
}

/**
 * @file koocError.inc.cws
 * @brief koocError functions
 * @note @ref develop @ref contrib @ref tools
 * @todo mettre respectivement chaque function
 * derror dans la section concernee.
 */

declare function	errorIncludeFile(path : value);
declare function	errorImport(message : value);
declare function	errorModule();
declare function	existClass(name : value);
declare function	existModule(name : value);
declare function	existVar(module : value, name : value, type : value);
declare function	existFunc(module : value, name : value, type : value, nb_arg : node);
declare function	countNbArgInFunc(theNode : node);
declare function	errorDebug(sError : value);

/**
 * @fn errorIncludeFile(path : value)
 * @brief check if the file included is great
 * @param path chemin
 */
function	errorIncludeFile(path : value)
{
  if (!path.existFile())
    {
      traceLine("#include \"" + path + "\" wasn't found");
      exit(-1);
    }
}

/**
 * @fn errorImport(message : value)
 * @brief send the error message of import
 * @param message the message sended by \#try/\#catch
 */
function	errorImport(message : value)
{
  traceLine(getInputFilename() + ":" + countInputLines() + ": "
	    + "error: expected identifier after token @module");
  traceLine("syntax error in @import: " + message);
  exit(-1);
}

/**
 * @fn errorModule()
 * @brief send the error message of module
 * @note exit -1
 */
function	errorModule()
{
  traceLine(getInputFilename() + ":" + countInputLines() + ": "
	    + "error: expected identifier after token @module");
  exit(-1);
}

/**
 * @fn existModule(name : value)
 * @brief check if the module exist
 * @param name module's name
 */
function	existModule(name : value)
{
  if (!existVariable(this.kooc.modules))
    {
      traceLine("this.kooc.modules not found");
      exit(-1);
    }
  foreach info in this.kooc.modules
  {
    if (key(info) == name)
      return (1);
  }
//  traceLine("error - module " + name + " doesn't exist.");
  return (0);
}

/**
 * @fn existCall(name : value)
 * @brief check if the class exist
 * @param name module's name
 */
function	existClass(name : value)
{
  if (!existVariable(this.kooc.classes))
    {
      traceLine("this.kooc.classes not found");
      return(-1);
    }
  foreach info in this.kooc.classes
  {
    if (key(info) == name)
      return (1);
  }
//  traceLine("error - module " + name + " doesn't exist.");
  return (0);
}

function	searchVariable(search : value, module : value, name : value, type : value)
{
  local		mangle = 0;
  local count_pointer = countStringOccurences(type, "*");
  type = replaceString('*', "", type);
  type.trim();

  foreach info in #evaluateVariable("this.kooc." + search)
  {
    if (key(info) == module)
      {
	foreach val in info
	{
	  if (val.type == "__VARIABLE__")
	    {
	      if (val.oname == name && mangle == 0 && type == "")
		mangle = val.name;
	      else if (val.oname == name && mangle != 0 && type == "")
		{
   	         traceLine("error - variable " + name + " have multiple type in "
			+ module + ", please use @!() to specifie the type.");
	          exit(-1);
		}
	      else if (val.oname == name && val.ctype.identifier == type && count_pointer == getArraySize(val.ctype.pointer))
		mangle = val.name;
	    }
	}
      }
  }
  return mangle;
}

/**
 * @fn existVar(module : value, name : value, type : value)
 * @brief check if the variable exist
 * @param module module's name
 * @param name variable's name
 * @param type type's name
 */
function	existVar(module : value, name : value, type : value)
{
  local	mangle = "";
  mangle = searchVariable("modules", module, name, type);
  if (mangle == 0)
    mangle = searchVariable("classes", module, name, type);
  return mangle;
}

/**
 * @fn existFunc(module : value, name : value, type : value, nb_arg : node)
 * @brief check if the function exist
 * @param module module's name
 * @param name function's name
 * @param type type's name
 * @param nb_arg the number of argument
 */
function	existFunc(module : value, name : value, type : value, nb_arg : node)
{
  local		ret = 0;

  local count_pointer = countStringOccurences(type, "*");
  type = replaceString('*', '', type);
  type.trim();
  foreach info in this.kooc.modules
  {
    if (key(info) == module)
      {
	foreach val in info
	{
	  if (val.type == "__PROTOTYPE__")
	    {
	      if (val.oname == name && ret == 0 && type == "")
		ref ret = val;
	      else if (val.oname == name && ret != 0 && type == "")
		{
		  traceLine("error - function " + name
			    + " have multiple type in " + module
			    + ", please use @!() to specifie the type.");
		  exit(-1);
		}
	      else if (val.oname == name && val.ctype.identifier == type && count_pointer == getArraySize(val.ctype.pointer))
		ref ret = val;
	    }
	}
      }
  }
  if (ret != 0)
    {
      nb_arg = countNbArgInFunc(ret.list);
      return (ret.name);
    }
  traceLine("error - function " + name + " doesn't exist in " + module + " module.");
  exit(-1);
}

/**
 * @fn countNbArgInFunc(theNode : node)
 * @brief count number of argument in function
 * @param theNode node in the tree
 */
function	countNbArgInFunc(theNode : node)
{
  local	i = 0;
  foreach val in theNode
  { i = $i + 1$; }
  return (i);
}

function	errorDebug(sError : value)
{
  traceLine("error: " + sError);
  //traceObject(this, 4);
  saveProject(this.kooc.stack["pathTree"]);
  exit(-1);
}

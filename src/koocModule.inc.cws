/**
 * @file koocModule.inc.cws
 * @brief koocModule functions
 * @note @ref develop @ref contrib @ref tools
 */

declare function	koocModuleInit(sModule : value);
declare function	koocModuleContent(sModule : value);

/**
 * @fn function	koocModuleInit(sModule : value)
 * @brief init the tree'information to insert module
 * @param sModule module's name
 */
function	koocModuleInit(sModule : value)
{
  local package = this.kooc.stack.package;
  if (package != "")
     package = '.' + package;
  insert #evaluateVariable("this.kooc.modules" + package  +  "[sModule]");
  insert #evaluateVariable("this.kooc.modules" + package + "[sModule].block");
  insert #evaluateVariable("this.kooc.modules" + package + "[sModule].package") = this.kooc.stack.package;
}

/**
 * @fn function	koocModuleCheck(sModule : value)
 * @brief check if the declaration is valid
 * @param sModule module's name
 */
function	koocModuleCheck(sModule : value)
{
  local package = this.kooc.stack.package;
  if (package != "")
     package = '.' + package;

  localref theNode = #evaluateVariable("this.kooc.modules" + package + "[sModule].block#back");

  if (theNode.type != "__VARIABLE__" &&
      theNode.type != "__PROTOTYPE__" &&
      theNode.type != "__TYPE__")
    {
      traceLine(getInputFilename() + ":" + countInputLines() + ": "
                + "error: unexpected identifier");
      exit(-1);
    }
}

/**
 * @fn function	koocModuleMangle(sModule : value)
 * @brief call mangle only if we must mangle it
 * @param sModule module's name
 */
function	koocModuleMangle(sModule : value)
{
  local package = this.kooc.stack.package;
  if (package != "")
     package = '.' + package;

  localref theNode = #evaluateVariable("this.kooc.modules" + package + "[sModule].block#back");

  if (theNode.type == "__VARIABLE__" ||
      theNode.type == "__PROTOTYPE__")
    {
      koocMangle(sModule);
    }
}

/**
 * @fn koocModuleContent(sModule : value)
 * @brief fill the tree and generate C code and header
 * @param sModule module's name
 */
function	koocModuleContent(sModule : value)
{
  local package = this.kooc.stack.package;
  if (package != "")
     package = '.' + package;

  local		modH = "km_" + sModule.toLowerString() + ".h";
  local		modC = "km_" + sModule.toLowerString() + ".c";

  insert #evaluateVariable("this.kooc.modules" + package  + "[sModule].nameH") = modH;
  insert #evaluateVariable("this.kooc.modules" + package  + "[sModule].nameC") = modC;
  generate("mod.h.cwt", #evaluateVariable("this.kooc.modules" + package + "[sModule]"), this.kooc.path_import + modH);
  generate("mod.c.cwt", #evaluateVariable("this.kooc.modules" + package + "[sModule]"), this.kooc.path_import + modC);
  {%>#include "@modH@"@"\n"@<%}
}


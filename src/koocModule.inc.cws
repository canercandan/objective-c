/**
 * @file koocModule.inc.cws
 * @brief koocModule functions
 * @note @ref develop @ref contrib @ref tools
 */

declare function	koocModuleInit(sModule : value, access : value);
declare function	koocModuleCheck(sModule : value);
declare function	koocModuleMangle(sModule : value);
declare function	koocModuleContent(sModule : value);
declare function	koocModuleErr();
declare function	koocModuleAdd(sModule : value);
declare function	koocModulePrint(sModule : value);

/**
 * @fn function	koocModuleInit(sModule : value)
 * @brief init the tree'information to insert module
 * @param sModule module's name
 */
function	koocModuleInit(sModule : value, access : value)
{
  local		modH = "km_" + replaceString('.', '_', sModule.toLowerString()) + ".h";
  local		modC = "km_" + replaceString('.', '_', sModule.toLowerString()) + ".c";

  insert this.kooc.modules[sModule];
  insert this.kooc.modules[sModule].access = access;
  insert this.kooc.modules[sModule].nameH = modH;
  insert this.kooc.modules[sModule].nameC = modC;
}

/**
 * @fn function	koocModuleCheck(sModule : value)
 * @brief check if the declaration is valid
 * @param sModule module's name
 */
function	koocModuleCheck(sModule : value)
{
  //localref theNode = this.kooc.modules[sModule].block#back;
  localref theNode = this.block#back;

  if (theNode.type != "__VARIABLE__" &&
      theNode.type != "__PROTOTYPE__" &&
      theNode.type != "__TYPE__")
    {
      traceLine(getInputFilename() + ":" + countInputLines() + ": "
                + "error: unexpected identifier");
      exit(-1);
    }
}

/**
 * @fn function	koocModuleMangle(sModule : value)
 * @brief call mangle only if we must mangle it
 * @param sModule module's name
 */
function	koocModuleMangle(sModule : value)
{
  //localref theNode = this.kooc.modules[sModule].block#back;
  localref theNode = this.block#back;

  if (theNode.type == "__VARIABLE__" ||
      theNode.type == "__PROTOTYPE__")
    {
      koocMangle(sModule, theNode);
    }
}

/**
 * @fn koocModuleContent(sModule : value)
 * @brief fill the tree and generate C code and header
 * @param sModule module's name
 */
function	koocModuleContent(sModule : value)
{
  {%>#include "@this.kooc.modules[sModule].nameH@"@"\n"@<%}
}

function	koocModuleErr()
{
  localref	theNode = this.block#back;

  if (theNode.type != "__VARIABLE__" &&
      theNode.type != "__PROTOTYPE__")
    {
      traceLine("\"" + theNode.name + "\" is a incorrect declaration in @module");
      exit(-1);
    }
}

function	koocModuleAdd(sModule : value)
{
  pushItem this.kooc.modules[sModule];
  ref this.kooc.modules[sModule]#back = this.block#back;
  if (this.block#back.type == "__VARIABLE__")
    treeInsertFileOut(this.kooc.stack["path_import"]
		      + this.kooc.modules[sModule].nameH + "_variable");
  else
    treeInsertFileOut(this.kooc.stack["path_import"]
		      + this.kooc.modules[sModule].nameH);
  koocModuleCheck(sModule);
  //koocModuleMangle(sModule);
}

function	koocModulePrint(sModule : value)
{
  koocImportIfndef(this.kooc.modules[sModule].nameH);
  {@@prettyPrinterToH(this.kooc.stack["path_import"]
		      + this.kooc.modules[sModule].nameH + "_variable")@@}
  {@@prettyPrinterToC(this.kooc.stack["path_import"]
		      + this.kooc.modules[sModule].nameH)@@}
  koocImportEndif(this.kooc.modules[sModule].nameH);
}

/**
 * @file kooc.cwp
 * @brief Kooc Grammar file
 * @note @ref develop @ref contrib @ref tools
 *
 * @par ImplicitCopy
 *
 * @par #ignore["KOOC"]
 * ignore backslash notation and comment of language
 *
 * @par translation_unit
 * it's the root rule (overload of Cnorm)
 *
 * @par koocDeclaration(block : node)
 * it's a rule which parse a import, module, implementation
 * or kooc expression
 */

#include "../cnorm_2.6/src/cnorm.cwp"
#include "koocError.inc.cws"
#include "koocImport.inc.cws"
#include "koocClass.inc.cws"
#include "koocImplementation.inc.cws"
#include "koocMangle.inc.cws"
#include "koocModule.inc.cws"
#include "koocCall.inc.cws"

/**
 * @cond
 */
#explicitCopy

#ignore["KOOC"] ::=
[#implicitCopy
 ['#' ->[['\r']? '\n']]
 | ["//" ->[['\r']? '\n']]
 | ["/*" ->"*/"]
 | ' ' | '\t' | '\n' | '\r' | '\f'
 ]+
;

#overload translation_unit ::=
#ignore("KOOC")
=> local package_name = "";
[koocDeclaration(this.block, package_name)
 | declaration(this.block)]*
#continue
#empty
;

koocDeclaration(block : node, package_name : node) ::=
  => local name;
[ koocImport | koocModule(name, package_name) | koocImplementation |
  koocClass | koocCall(block) ]
;
/**
 * @endcond
 */

#include "koocImport.cwp"
#include "koocModule.cwp"
#include "koocImplementation.cwp"
#include "koocClass.cwp"
#include "koocCall.cwp"

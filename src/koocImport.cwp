/**
 * @file koocImport.cwp
 * @brief \@import grammar
 * @note @ref develop @ref contrib @ref tools
 *
 * @par koocImport
 * rule \@import
 *
 * @par checkFile(file : value, module : value)
 * check if the file exist
 *
 * @par checkModule(module : value, kc : value)
 * check if the module exist
 *
 * @bug les defines ne sont pas copier du .kh au .h
 * il faut accepter les #... lors de explicitCopy@n
 * Repare : mais stocke dans le .c au lieu du .h
 */

/**
 * @cond
 */
koocImport ::= #explicitCopy
  => local module = "";
#try
"@import"
#continue [#readIdentifier:module "from"]?
#continue #readCString:file
#catch(sError)
[
 [checkFile(file, module) => koocManglePopAllBlock();]
 | => errorImport(sError);
 ]
=> indentFile(getEnv("pathH"), "C++");
[#check(module == "") => koocImportInclude(file);]
#generatedFile(getEnv("pathC"))
;

checkFile(file : value, module : value) ::=
  => local pathKh = koocImportPathKh(file);
=> putEnv("pathH", koocImportPathH(file));
#check(pathKh.existFile())
[
 => deleteFile(getEnv("pathH"));
#generatedFile(getEnv("pathH"))
#parsedFile(pathKh)
 [
  => koocImportIfndef(file);
  [koocDeclaration(this.block):kc checkModule(module, kc)
   | declaration(this.block)
   => treeInsertFileOut(getEnv("pathH"));
   ]*
#continue #empty
  => {@@prettyPrinterToC(getEnv("pathH"))@@}
  => koocImportEndif(file);
  ]
 ]
| => errorIncludeFile(getEnv("path_import") + file);
;

checkModule(module : value, kc : value) ::=
  [
#check(module == "") |
   [=> local name = "";
#parsedString(kc) module(name) => traceLine("kc: " + kc);
    [#check(name != module) => removeVariable(this.kooc.modules[name]);]
    ]
   ]
  ;
/**
 * @endcond
 */

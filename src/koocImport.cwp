/**
 * @file koocImport.cwp
 * @brief \@import grammar
 * @note @ref develop @ref contrib @ref tools
 *
 * @par koocImport
 * rule \@import
 *
 * @par checkFile(file : value, module : value)
 * check if the file exist
 *
 * @par checkModule(module : value, kc : value)
 * check if the module exist
 *
 * @bug les defines ne sont pas copier du .kh au .h
 * il faut accepter les #... lors de explicitCopy@n
 * Repare : mais stocke dans le .c au lieu du .h
 */

/**
 * @cond
 */
koocImport ::= #explicitCopy
  => local module = "";
#try
"@import"
#continue [#readIdentifier:module "from"]?
#continue #readCString:file
#catch(sError)
[
 checkFile(file, module)
 | => errorImport(sError);
 ]
;

checkFile(file : value, module : value) ::=
  => local pathKh = koocImportPathKh(file);
=> local pathH = koocImportPathH(file);
#check(pathKh.existFile())
[
#check(!this.kooc.headers.findElement(pathH))
 [=> koocImportIfndef(file);
#parsedFile(pathKh)
  [
   [koocDeclaration(this.kooc.headers[pathH].block):kc checkModule(module, kc)
    | declaration(this.kooc.headers[pathH].block):c
    //=> appendFile(pathH, c + '\n');
    ]+
#continue #empty
   => prettyPrintExistFile(pathH,
			   this.kooc.headers[pathH]);
   ]
  => koocImportEndif(file);
  [#check(module == "") => koocImportInclude(file);]
  ]
 ]
| => errorIncludeFile(this.kooc.path_import + file);
;

checkModule(module : value, kc : value) ::=
  [
#check(module == "") |
   [=> local name = "";
#parsedString(kc) module(name) => traceLine("kc: " + kc);
    [#check(name != module) => removeVariable(this.kooc.modules[name]);]
    ]
   ]
  ;
/**
 * @endcond
 */

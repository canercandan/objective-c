/**
 * @file prettyPrinter.h.inc.cws
 * @brief PrettyPrinter to print the kooc to header
 * @note
 * @ref develop
 * @ref contrib
 * @ref tools
 */

declare function getSimpleType(theNode : node);
declare function getPointer(theNode : node);
declare function getBits(theNode : node);
declare function getArrayInfo(theNode : node);
declare function getCommentSuffix(theNode : node);
declare function oneArgument(theNode : node, type : value = 1);
declare function getArgument(ctype : node);
declare function getArgumentStructOrUnion(ctype : node);
declare function getStructOrUnion(conterner : node);
declare function getArgumentEnum(ctype : node);
declare function getEnum(Enum : node);
declare function getFunction(function : node);
declare function getVariable(variable : node);
declare function getVariableTypeLess(variable : node);
declare function getExternVariable(variable : node);
declare function getDefineHeader();

/**
 * @fn getSimpleType(theNode : node)
 * @brief get a simple type from the node
 * @param theNode the node
 * @return the simple type
 */
function getSimpleType(theNode : node)
{
  local sInfo = "";

  if (existVariable(theNode.ctype.infoType))
    foreach info in theNode.ctype.infoType
      sInfo += key(info) + " ";
  if (existVariable(theNode.ctype.specifier))
    sInfo += theNode.ctype.specifier + " ";
  if (existVariable(theNode.ctype.sign))
    sInfo += theNode.ctype.sign + " ";
  return (sInfo + theNode.ctype.identifier);
}

/**
 * @fn getPointer(theNode : node)
 * @brief get the pointer if the variable is a pointer
 * @param theNode the node
 * @return the pointer (*)
 */
function getPointer(theNode : node)
{
  local sInfo = "";

  if (existVariable(theNode.ctype.pointer))
    foreach info in theNode.ctype.pointer
    {
      if (existVariable(info.level))
	sInfo += info.level;
      if (existVariable(info.qualifier))
	sInfo += ' ' + info.qualifier;
    }
  return (sInfo);
}

/**
 * @fn getBits(theNode : node)
 * @brief get number of bits if exist
 * @param theNode the node
 * @return the number of bits
 */
function getBits(theNode : node)
{
  local sInfo;

  if (existVariable(theNode.bits))
    sInfo = ':' + theNode.bits.value;
  return (sInfo);
}

/**
 * @fn getArrayInfo(theNode : node)
 * @brief get number between [ and ] to a array's variable
 * @param theNode the node
 * @return the number
 */
function getArrayInfo(theNode : node)
{
  local sInfo = "";

  foreach info in theNode.ctype.array
    sInfo += '[' + info + ']';
  return (sInfo);
}

/**
 * @fn getCommentSuffix(theNode : node)
 * @brief get the suffix's comment
 * @param theNode the node
 * @return the suffix's comment
 */
function getCommentSuffix(theNode : node)
{
  local sInfo = "";

  if (existVariable(theNode.comment_suffix))
    foreach info in theNode.comment_suffix
      sInfo += ' ' + info;
  return (sInfo);
}

/**
 * @fn oneArgument(theNode : node, type : value = 1)
 * @brief if type is equal to 1 then the function return an argument
 * of function else the function only return the name of argument
 * @param theNode the node
 * @param type type with default value = 1
 * @return e.g. brief
 */
function oneArgument(theNode : node, type : value = 1)
{
  local sInfo;

  if ($type == 1$)
    {
      sInfo = getSimpleType(theNode) + getPointer(theNode);
      if (existVariable(theNode.name))
	sInfo += ' ' + theNode.name;
      sInfo += getArrayInfo(theNode) + getBits(theNode)
	+ getCommentSuffix(theNode);
    }
  else
    sInfo = theNode.name;
  return (sInfo);
}

/**
 * @fn getVariable(variable : node)
 * @brief get variable with the function oneArgument()
 * @param variable a variable
 * @return the result of oneArgument()
 */
function getVariable(variable : node)
{
  return (oneArgument(variable));
}

/**
 * @fn getVariableTypeLess(variable : node)
 * @brief get variable without type with the function oneArgument()
 * @param variable a variable
 * @return the result of oneArgument()
 */
function getVariableTypeLess(variable : node)
{
  return (oneArgument(variable, 0));
}

/**
 * @fn getExternVariable(variable : node)
 * @brief get extern variable if the variable exist
 * @param variable a variable
 * @return extern variable
 */
function getExternVariable(variable : node)
{
  local sInfo = "";

  if (!existVariable(variable.ctype.infoType["extern"]))
    sInfo += "extern ";
  sInfo += oneArgument(variable) + ';';
  return (sInfo);
}

/**
 * @fn getArgument(ctype : node)
 * @brief get arguments of the function
 * @param ctype ctype argument
 * @return the arguments
 */
function getArgument(ctype : node)
{
  local sInfo = "";

  foreach info in ctype.list
  {
    if (!first(info))
      sInfo += ", ";
    sInfo += oneArgument(info);
  }
  return (sInfo);
}

/**
 * @fn getArgumentStructOrUnion(ctype : node)
 * @brief get arguments of the struct or union
 * @param ctype ctype argument
 * @return the arguments
 */
function getArgumentStructOrUnion(ctype : node)
{
  local sInfo = "";

  foreach info in ctype.list
  {
    if (existVariable(info.ctype.list))
      {
	if (info.ctype.specifier == "struct" ||
	    info.ctype.specifier == "union")
	  sInfo += getStructOrUnion(info);
	else if (info.ctype.specifier == "enum")
	  sInfo += getEnum(info);
      }
    else
      sInfo += oneArgument(info) + ";\n";
  }
  return (sInfo);
}

/**
 * @fn getStructOrUnion(conterner : node)
 * @brief get a struct or a union
 * @param conterner conterner is a block of struct or union
 * @return the struct or union
 */
function getStructOrUnion(conterner : node)
{
  local sInfo;

  sInfo = getSimpleType(conterner);
  if (existVariable(conterner.ctype.list))
    sInfo += "\n{\n"
      + getArgumentStructOrUnion(conterner.ctype)
      + '}';
  if (existVariable(conterner.name))
    sInfo += getPointer(conterner) + conterner.name;
  sInfo += ";\n";
  return (sInfo);
}

/**
 * @fn getArgumentEnum(ctype : node)
 * @brief get argument of the enum
 * @param ctype 
 * @return 
 */
function getArgumentEnum(ctype : node)
{
  local sInfo = "";

  foreach info in ctype.list
  {
    sInfo += key(info);
    if (!last(info))
      sInfo += ',';
    sInfo += '\n';
  }
  return (sInfo);
}

function getEnum(Enum : node)
{
  local sInfo;

  sInfo = getSimpleType(Enum) + '\n'
    + "{\n" + getArgumentEnum(Enum.ctype) + '}';
  if (existVariable(Enum.name))
    sInfo += Enum.name;
  sInfo += ";\n";
  return (sInfo);
}

function getFunction(function : node)
{
  local sInfo;

  sInfo = getSimpleType(function) + ' ';
  if (function.ctype.type == "__PFUNCTION__")
    sInfo += "(*" + function.name + ')';
  else
    sInfo += function.name;
  sInfo += '(' + getArgument(function);
  if (existVariable(function.list.ellipsis))
    sInfo += ", ...";
  sInfo += ')' + getCommentSuffix(function);
  return (sInfo);
}

function getDefineHeader()
{
  local sInfo;

  sInfo = replaceString('/', '_', this.nameH);
  sInfo = replaceString('.', '_', sInfo);
  return (toUpperString(sInfo));
}
